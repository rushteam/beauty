// Code generated by beauty; DO NOT EDIT.

package router

import (
	"net/http"

	"{{.ImportPath}}internal/config"
	"{{.ImportPath}}internal/endpoint/handlers"
	"{{.ImportPath}}internal/infra/middleware"

	"github.com/go-chi/chi/v5"
	chimiddleware "github.com/go-chi/chi/v5/middleware"
	"github.com/go-chi/cors"
	"github.com/rushteam/beauty"
	"github.com/rushteam/beauty/pkg/service/webserver"
)

// Route 路由定义
type Route struct {
	Method  string
	URI     string
	Handler http.HandlerFunc
	Name    string
}

// New 创建路由
func New(cfg *config.Config) beauty.Option {
	r := chi.NewRouter()

	// 基础中间件
	r.Use(chimiddleware.Logger)
	r.Use(chimiddleware.Recoverer)
	r.Use(chimiddleware.RequestID)
	r.Use(chimiddleware.RealIP)
	r.Use(chimiddleware.Timeout(cfg.HTTP.ReadTimeout))

	// CORS中间件
	r.Use(cors.Handler(cors.Options{
		AllowedOrigins:   []string{"*"},
		AllowedMethods:   []string{"GET", "POST", "PUT", "DELETE", "OPTIONS"},
		AllowedHeaders:   []string{"Accept", "Authorization", "Content-Type", "X-CSRF-Token"},
		ExposedHeaders:   []string{"Link"},
		AllowCredentials: true,
		MaxAge:           300,
	}))

	// 健康检查
	r.Get("/health", handlers.HealthCheck)
	r.Get("/metrics", handlers.Metrics)

	// API路由组
	r.Route("/api/v1", func(r chi.Router) {
		// 注册所有路由
		for _, route := range routes() {
			r.Method(route.Method, route.URI, route.Handler)
		}
	})

	// 静态文件服务
	r.Handle("/static/*", http.StripPrefix("/static/", http.FileServer(http.Dir("./static/"))))

	// 创建中间件管理器
	middlewareManager := middleware.New(cfg)
	webServerOptions := middlewareManager.GetWebServerOptions()

	// 添加服务名选项
	webServerOptions = append(webServerOptions, webserver.WithServiceName(cfg.App))

	return beauty.WithService(webserver.New(cfg.HTTP.Addr, r, webServerOptions...))
}